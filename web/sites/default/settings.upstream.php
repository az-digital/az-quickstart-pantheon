<?php

use Drupal\Core\Installer\InstallerKernel;

/**
 * @file
 * Upstream configuration file for AZ QuickStart sites.
 *
 * IMPORTANT:
 * Do not modify this file.  This file is maintained by the AZ QuickStart
 * upstream maintainers.
 *
 * Site-specific modifications belong in settings.php, not this file. This file
 * may change in future releases and modifications would cause conflicts when
 * attempting to apply upstream updates.
 */

/**
 * Allow loading config for the 'migrate' database from
 * sites/default/files/private/migration_config.json
 */
const MIGRATION_DB_CONFIG_FILE_PATH = 'sites/default/files/private/migration_config.json';
if (file_exists(MIGRATION_DB_CONFIG_FILE_PATH)) {
  $migration_config = json_decode(file_get_contents(MIGRATION_DB_CONFIG_FILE_PATH), TRUE);
  if (isset($migration_config)) {
    $databases['migrate']['default'] = [
      'database' => $migration_config['mysql_database'],
      'password' => $migration_config['mysql_password'],
      'host' => $migration_config['mysql_host'],
      'port' => $migration_config['mysql_port'],
      'username' => $migration_config['mysql_username'],
      'driver' => 'mysql',
      'prefix' => '',
      'collation' => 'utf8mb4_general_ci',
    ];
  }
}

// Configure Redis

if (defined('PANTHEON_ENVIRONMENT')) {
  if (!InstallerKernel::installationAttempted()) {
    if (extension_loaded('redis')) {
      // Set Redis as the default backend for any cache bin not otherwise specified.
      $settings['cache']['default'] = 'cache.backend.redis';

      //phpredis is built into the Pantheon application container.
      $settings['redis.connection']['interface'] = 'PhpRedis';

      // These are dynamic variables handled by Pantheon.
      $settings['redis.connection']['host'] = $_ENV['CACHE_HOST'];
      $settings['redis.connection']['port'] = $_ENV['CACHE_PORT'];
      $settings['redis.connection']['password'] = $_ENV['CACHE_PASSWORD'];

      $settings['redis_compress_length'] = 100;
      $settings['redis_compress_level'] = 1;

      $settings['cache_prefix']['default'] = 'pantheon-redis';

      $settings['cache']['bins']['form'] = 'cache.backend.database'; // Use the database for forms

      // Apply changes to the container configuration to make better use of Redis.
      // This includes using Redis for the lock and flood control systems, as well
      // as the cache tag checksum. Alternatively, copy the contents of that file
      // to your project-specific services.yml file, modify as appropriate, and
      // remove this line.
      $settings['container_yamls'][] = 'modules/contrib/redis/example.services.yml';

      // Allow the services to work before the Redis module itself is enabled.
      $settings['container_yamls'][] = 'modules/contrib/redis/redis.services.yml';

      // Manually add the classloader path, this is required for the container
      // cache bin definition below.
      $class_loader->addPsr4('Drupal\\redis\\', 'modules/contrib/redis/src');

      // Use redis for container cache.
      // The container cache is used to load the container definition itself, and
      // thus any configuration stored in the container itself is not available
      // yet. These lines force the container cache to use Redis rather than the
      // default SQL cache.
      $settings['bootstrap_container_definition'] = [
        'parameters' => [],
        'services' => [
          'redis.factory' => [
            'class' => 'Drupal\redis\ClientFactory',
          ],
          'cache.backend.redis' => [
            'class' => 'Drupal\redis\Cache\CacheBackendFactory',
            'arguments' => [
              '@redis.factory',
              '@cache_tags_provider.container',
              '@serialization.phpserialize',
            ],
          ],
          'cache.container' => [
            'class' => '\Drupal\redis\Cache\PhpRedis',
            'factory' => ['@cache.backend.redis', 'get'],
            'arguments' => ['container'],
          ],
          'cache_tags_provider.container' => [
            'class' => 'Drupal\redis\Cache\RedisCacheTagsChecksum',
            'arguments' => ['@redis.factory'],
          ],
          'serialization.phpserialize' => [
            'class' => 'Drupal\Component\Serialization\PhpSerialize',
          ],
        ],
      ];
    }
  }
}

/**
 * Fast 404 pages:
 *
 * Drupal can generate fully themed 404 pages. However, some of these responses
 * are for images or other resource files that are not displayed to the user.
 * This can waste bandwidth, and also generate server load.
 *
 * The options below return a simple, fast 404 page for URLs matching a
 * specific pattern:
 * - $config['system.performance']['fast_404']['exclude_paths']: A regular
 *   expression to match paths to exclude, such as images generated by image
 *   styles, or dynamically-resized images. The default pattern provided below
 *   also excludes the private file system. If you need to add more paths, you
 *   can add '|path' to the expression.
 * - $config['system.performance']['fast_404']['paths']: A regular expression to
 *   match paths that should return a simple 404 page, rather than the fully
 *   themed 404 page. If you don't have any aliases ending in htm or html you
 *   can add '|s?html?' to the expression.
 * - $config['system.performance']['fast_404']['html']: The html to return for
 *   simple 404 pages.
 *
 */

// Standard Fast 404 settings copied from default.settings.php.
$config['system.performance']['fast_404']['exclude_paths'] = '/\/(?:styles)|(?:system\/files)\//';
$config['system.performance']['fast_404']['paths'] = '/\.(?:txt|png|gif|jpe?g|css|js|ico|swf|flv|cgi|bat|pl|dll|exe|asp)|(?:autodiscover.xml)|(?:\/wp-login.php)|(?:\/xmlrpc.php)|(?:\/wp-admin\/.*)$/i';
$config['system.performance']['fast_404']['html'] = '<!DOCTYPE html><html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL "@path" was not found on this server.</p></body></html>';
$config['system.performance']['fast_404']['enabled'] = TRUE;

/**
 * Default configuration for all Pantheon Environment requests.
 *
 * Settings in this block will be loaded for ALL requests (web and CLI) to
 * Pantheon environments.
 */
if (defined('PANTHEON_ENVIRONMENT')) {
  /**
   * Redirect all http requests to a pantheonsite.io domain to https
   */
  if (php_sapi_name() !== 'cli') {
    if (
      preg_match('/.*\.pantheonsite\.io$/', $_SERVER['HTTP_HOST']) &&
      (!isset($_SERVER['HTTP_USER_AGENT_HTTPS'])
        || $_SERVER['HTTP_USER_AGENT_HTTPS'] !== 'ON')
    ) {
      header('HTTP/1.0 301 Moved Permanently');
      header('Location: https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
      exit();
    }
  }

  /**
   * Environment-specific performance and caching configuration overrides.
   *
   * @see https://pantheon.io/docs/drupal-cache/
   */
  // Performance settings for test and live environments.
  if (in_array($_ENV['PANTHEON_ENVIRONMENT'], ['test', 'live'])) {
    // Browser and proxy cache maximum age - 6 hours.
    $config['system.performance']['cache']['page']['max_age'] = 21600;

    // Aggregate CSS files - on.
    $config['system.performance']['css']['preprocess'] = 1;

    // Aggregate CSS files - on.
    $config['system.performance']['js']['preprocess'] = 1;
  }

  // Performance settings for development environments, including multidev.
  else {
    // Browser and proxy cache maximum age - No caching.
    $config['system.performance']['cache']['page']['max_age'] = 0;

    // Aggregate CSS files - off.
    $config['system.performance']['css']['preprocess'] = 0;

    // Aggregate CSS files - off.
    $config['system.performance']['js']['preprocess'] = 0;
  }

  /**
   * Environment Indicator module settings.
   * see: https://pantheon.io/docs/environment-indicator
   */
  // Pantheon Env Specific Config
  if (isset($_ENV['PANTHEON_ENVIRONMENT'])) {
    switch ($_ENV['PANTHEON_ENVIRONMENT']) {
      case 'lando':
        // Localdev or Lando environments.
        $config['environment_indicator.indicator']['name'] = 'Local Dev (Lando)';
        $config['environment_indicator.indicator']['bg_color'] = '#990055';
        $config['environment_indicator.indicator']['fg_color'] = '#ffffff';
        break;
      case 'dev':
        $config['environment_indicator.indicator']['name'] = 'Dev (Pantheon)';
        $config['environment_indicator.indicator']['bg_color'] = '#4a634e';
        $config['environment_indicator.indicator']['fg_color'] = '#ffffff';
        break;
      case 'test':
        $config['environment_indicator.indicator']['name'] = 'Test (Pantheon)';
        $config['environment_indicator.indicator']['bg_color'] = '#a95c42';
        $config['environment_indicator.indicator']['fg_color'] = '#ffffff';
        break;
      case 'live':
        $config['environment_indicator.indicator']['name'] = 'LIVE (Pantheon)';
        $config['environment_indicator.indicator']['bg_color'] = '#0f0f0f';
        $config['environment_indicator.indicator']['fg_color'] = '#dddddd';
        break;
      default:
        // Multidev catchall.
        $config['environment_indicator.indicator']['name'] = $_ENV['PANTHEON_ENVIRONMENT'] . ' (Pantheon)';
        $config['environment_indicator.indicator']['bg_color'] = '#1e5288';
        $config['environment_indicator.indicator']['fg_color'] = '#ffffff';
        break;
    }
  }
}
else {
  $config['environment_indicator.indicator']['name'] = 'Local';
  $config['environment_indicator.indicator']['bg_color'] = '#707070';
  $config['environment_indicator.indicator']['fg_color'] = '#ffffff';
}
